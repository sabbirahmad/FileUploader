/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package fileuploadclient;

import java.io.*;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.channels.FileChannel;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Sabbir
 */
public class FileUploadClient extends javax.swing.JFrame {

    /**
     * Creates new form FileUploadClient
     */
    private static final int WRONG_ID=0;
    private static final int DUPLICATE_IP=1;//two rolls uses same IP
    private static final int DUPLICATE_ID=2;//two IP uses same roll
    private static final int VERIFIED_IP_ID=3;
    
    int progress=0;
    int loopProg=0;
    double l=0;
    double progressDouble=0.0;
    
    private int verified=VERIFIED_IP_ID;
    private String ipClient;
    private String portClient;
    private int portClientInt=6789;
    private String studentId="";
    private int studentIdInt=-1;
    
    private Socket connection;
    
    private DataOutputStream output;
    private DataInputStream input;
    private FileInputStream fiStream;
    private OutputStream os;
    
    //private BufferedOutputStream bos;
    
    //private String fileType="";
    private String fileName="";
    
    private boolean matchPattern=false;
    //private boolean overwrite=false;
    private int overwrite=0;
    private int length=0;
    
    private String fileLocation="";
    private File selectedFile;
    private File[] selectedFiles;
    private int multipleFileNumber=0;
    private int fileCounter=0;
    
    private boolean fileUpload=false;
    private boolean folderUpload=false;
    private boolean deleteFile=false;
    private boolean success=false;
    private boolean loop=false;
    private boolean isFile=true;
    private boolean multipleFiles=false;
    
    
    private long fileSize=0;
    private long fileSizeMB=0;
    private int fileNumber=0;
    private int fileNumberCount=0;
    
    private boolean stopUploadFlag=false;
    
    
    private int segmentSize=512;
    private long startingByte=0;
    private static final String delim="::";
    private static final byte[] delimByteArray=stringToBytes(delim);
    private int sendArrayCount=0;
    private byte[] fileByteArray;
    
    private byte[] sendArray;
    
    public FileUploadClient() {
        initComponents();
        choosePanel.setVisible(false);
        setStatusLabel.setText("Ready to connect");
        overwriteDialog.setTitle("Replace or Skip Files");
        overwriteDialog.setVisible(false);
        overwriteDialog.setLocationByPlatform(true);
        
        exitDialog.setLocationByPlatform(true);
        //exitDialog.setAlwaysOnTop(true);
        exitDialog.setTitle("Exit");
        exitDialog.setSize(220, 110);
        
        //overwriteDialog.setSize(280, 130);
        //overwriteDialog.setResizable(false);
        
        aboutDialog.setLocationByPlatform(true);
        //aboutDialog.setAlwaysOnTop(true);
        aboutDialog.setTitle("About");
        aboutDialog.setSize(250, 220);
        
        uploadDialog.setLocationByPlatform(true);
        //uploadDialog.setAlwaysOnTop(true);
        uploadDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        uploadDialog.setTitle("Uploading...");
        uploadDialog.setSize(350, 130);
        
        
        againUploadDialog.setLocationByPlatform(true);
        //againUploadDialog.setAlwaysOnTop(true);
        againUploadDialog.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
        againUploadDialog.setTitle("Upload again");
        againUploadDialog.setSize(220, 130);
        
        numberUploadedLabel.setText("0");
        
        fileByteArray=new byte[512];
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        overwriteDialog = new javax.swing.JDialog();
        overwriteLabel = new javax.swing.JLabel();
        yesOverwriteButton = new javax.swing.JButton();
        noOverwriteButton = new javax.swing.JButton();
        keepBothOverwriteButton = new javax.swing.JButton();
        aboutDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        exitDialog = new javax.swing.JDialog();
        exitLabel = new javax.swing.JLabel();
        exitButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        uploadDialog = new javax.swing.JDialog();
        fileUploadProgressBar = new javax.swing.JProgressBar();
        cancelUploadDialogButton = new javax.swing.JButton();
        statusUploadDialogLabel = new javax.swing.JLabel();
        againUploadDialog = new javax.swing.JDialog();
        yesAgainUploadButton = new javax.swing.JButton();
        noAgainUploadButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        clientPanel = new javax.swing.JPanel();
        choosePanel = new javax.swing.JPanel();
        chooseFileButton = new javax.swing.JButton();
        fileLocationTextField = new javax.swing.JTextField();
        uploadButton = new javax.swing.JButton();
        connectPanel = new javax.swing.JPanel();
        ipClientTextField = new javax.swing.JTextField();
        portClientTextField = new javax.swing.JTextField();
        portClientLabel = new javax.swing.JLabel();
        ipClientLabel = new javax.swing.JLabel();
        connectButton = new javax.swing.JButton();
        studentIdLabel = new javax.swing.JLabel();
        studentIdTextField = new javax.swing.JTextField();
        rulesPanel = new javax.swing.JPanel();
        setSizeLabel = new javax.swing.JLabel();
        setNumberLabel = new javax.swing.JLabel();
        uploadLimitLabel = new javax.swing.JLabel();
        sizeLimitLabel = new javax.swing.JLabel();
        folderCheckBox = new javax.swing.JCheckBox();
        fileCheckBox = new javax.swing.JCheckBox();
        rulesLabel = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        setStatusLabel = new javax.swing.JLabel();
        uploadedLabel = new javax.swing.JLabel();
        numberUploadedLabel = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitFileMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutHelpMenuItem = new javax.swing.JMenuItem();

        overwriteDialog.setBounds(new java.awt.Rectangle(0, 0, 280, 130));
        overwriteDialog.setResizable(false);

        overwriteLabel.setText("File exists! Do you want to overwrite the file?");

        yesOverwriteButton.setText("Yes");
        yesOverwriteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesOverwriteButtonActionPerformed(evt);
            }
        });

        noOverwriteButton.setText("No");
        noOverwriteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noOverwriteButtonActionPerformed(evt);
            }
        });

        keepBothOverwriteButton.setText("Keep Both");
        keepBothOverwriteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keepBothOverwriteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout overwriteDialogLayout = new javax.swing.GroupLayout(overwriteDialog.getContentPane());
        overwriteDialog.getContentPane().setLayout(overwriteDialogLayout);
        overwriteDialogLayout.setHorizontalGroup(
            overwriteDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(overwriteDialogLayout.createSequentialGroup()
                .addGroup(overwriteDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(overwriteDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(yesOverwriteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noOverwriteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(keepBothOverwriteButton))
                    .addGroup(overwriteDialogLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(overwriteLabel)))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        overwriteDialogLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {keepBothOverwriteButton, noOverwriteButton, yesOverwriteButton});

        overwriteDialogLayout.setVerticalGroup(
            overwriteDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(overwriteDialogLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(overwriteLabel)
                .addGap(18, 18, 18)
                .addGroup(overwriteDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(overwriteDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(noOverwriteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(keepBothOverwriteButton))
                    .addGroup(overwriteDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(yesOverwriteButton)))
                .addGap(43, 43, 43))
        );

        aboutDialog.setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("File Upload Client");

        jLabel2.setText("Version 1.0");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Sabbir Ahmad");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel4.setText("#1005010");

        jLabel5.setText("CSE 322");

        javax.swing.GroupLayout aboutDialogLayout = new javax.swing.GroupLayout(aboutDialog.getContentPane());
        aboutDialog.getContentPane().setLayout(aboutDialogLayout);
        aboutDialogLayout.setHorizontalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialogLayout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4))
                .addContainerGap(164, Short.MAX_VALUE))
        );
        aboutDialogLayout.setVerticalGroup(
            aboutDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(aboutDialogLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        exitDialog.setResizable(false);

        exitLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        exitLabel.setText("Are you sure to exit?");

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout exitDialogLayout = new javax.swing.GroupLayout(exitDialog.getContentPane());
        exitDialog.getContentPane().setLayout(exitDialogLayout);
        exitDialogLayout.setHorizontalGroup(
            exitDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitDialogLayout.createSequentialGroup()
                .addGroup(exitDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(exitDialogLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(exitButton)
                        .addGap(18, 18, 18)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(exitDialogLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(exitLabel)))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        exitDialogLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, exitButton});

        exitDialogLayout.setVerticalGroup(
            exitDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(exitDialogLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addComponent(exitLabel)
                .addGap(18, 18, 18)
                .addGroup(exitDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exitButton)
                    .addComponent(cancelButton))
                .addGap(21, 21, 21))
        );

        uploadDialog.setResizable(false);

        cancelUploadDialogButton.setText("Cancel");
        cancelUploadDialogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelUploadDialogButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout uploadDialogLayout = new javax.swing.GroupLayout(uploadDialog.getContentPane());
        uploadDialog.getContentPane().setLayout(uploadDialogLayout);
        uploadDialogLayout.setHorizontalGroup(
            uploadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uploadDialogLayout.createSequentialGroup()
                .addGroup(uploadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(uploadDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fileUploadProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
                    .addGroup(uploadDialogLayout.createSequentialGroup()
                        .addGroup(uploadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(uploadDialogLayout.createSequentialGroup()
                                .addGap(140, 140, 140)
                                .addComponent(cancelUploadDialogButton))
                            .addGroup(uploadDialogLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(statusUploadDialogLabel)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        uploadDialogLayout.setVerticalGroup(
            uploadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uploadDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusUploadDialogLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fileUploadProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelUploadDialogButton)
                .addContainerGap(78, Short.MAX_VALUE))
        );

        yesAgainUploadButton.setText("Yes");
        yesAgainUploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesAgainUploadButtonActionPerformed(evt);
            }
        });

        noAgainUploadButton.setText("No");
        noAgainUploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noAgainUploadButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Do you want to upload again?");

        javax.swing.GroupLayout againUploadDialogLayout = new javax.swing.GroupLayout(againUploadDialog.getContentPane());
        againUploadDialog.getContentPane().setLayout(againUploadDialogLayout);
        againUploadDialogLayout.setHorizontalGroup(
            againUploadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(againUploadDialogLayout.createSequentialGroup()
                .addGroup(againUploadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(againUploadDialogLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(yesAgainUploadButton)
                        .addGap(18, 18, 18)
                        .addComponent(noAgainUploadButton))
                    .addGroup(againUploadDialogLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel6)))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        againUploadDialogLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {noAgainUploadButton, yesAgainUploadButton});

        againUploadDialogLayout.setVerticalGroup(
            againUploadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(againUploadDialogLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(againUploadDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yesAgainUploadButton)
                    .addComponent(noAgainUploadButton))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        clientPanel.setBackground(new java.awt.Color(44, 166, 124));

        chooseFileButton.setText("Choose File");
        chooseFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileButtonActionPerformed(evt);
            }
        });

        fileLocationTextField.setEditable(false);
        fileLocationTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileLocationTextFieldMouseClicked(evt);
            }
        });

        uploadButton.setText("Upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout choosePanelLayout = new javax.swing.GroupLayout(choosePanel);
        choosePanel.setLayout(choosePanelLayout);
        choosePanelLayout.setHorizontalGroup(
            choosePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(choosePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(choosePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(choosePanelLayout.createSequentialGroup()
                        .addComponent(chooseFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileLocationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, choosePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(uploadButton)))
                .addContainerGap())
        );
        choosePanelLayout.setVerticalGroup(
            choosePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(choosePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(choosePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooseFileButton)
                    .addComponent(fileLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(uploadButton)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        ipClientTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N

        portClientTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N

        portClientLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        portClientLabel.setText("Server Port");

        ipClientLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        ipClientLabel.setText("Server IP");

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        studentIdLabel.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        studentIdLabel.setText("Student ID");

        studentIdTextField.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N

        javax.swing.GroupLayout connectPanelLayout = new javax.swing.GroupLayout(connectPanel);
        connectPanel.setLayout(connectPanelLayout);
        connectPanelLayout.setHorizontalGroup(
            connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(portClientLabel)
                    .addComponent(ipClientLabel)
                    .addComponent(studentIdLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(studentIdTextField)
                    .addComponent(ipClientTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                    .addComponent(portClientTextField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 131, Short.MAX_VALUE)
                .addComponent(connectButton)
                .addContainerGap())
        );
        connectPanelLayout.setVerticalGroup(
            connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(connectPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipClientLabel)
                    .addComponent(ipClientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portClientLabel)
                    .addComponent(portClientTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectButton)
                    .addGroup(connectPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(studentIdLabel)
                        .addComponent(studentIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSizeLabel.setMaximumSize(new java.awt.Dimension(64, 14));
        setSizeLabel.setMinimumSize(new java.awt.Dimension(64, 14));
        setSizeLabel.setPreferredSize(new java.awt.Dimension(64, 14));

        setNumberLabel.setMaximumSize(new java.awt.Dimension(64, 14));
        setNumberLabel.setMinimumSize(new java.awt.Dimension(64, 14));
        setNumberLabel.setPreferredSize(new java.awt.Dimension(64, 14));

        uploadLimitLabel.setText("Upload Limit: ");

        sizeLimitLabel.setText("Size Limit:");

        folderCheckBox.setText("Folder");
        folderCheckBox.setEnabled(false);

        fileCheckBox.setText("File");
        fileCheckBox.setEnabled(false);

        rulesLabel.setText("Upload Rules:");

        javax.swing.GroupLayout rulesPanelLayout = new javax.swing.GroupLayout(rulesPanel);
        rulesPanel.setLayout(rulesPanelLayout);
        rulesPanelLayout.setHorizontalGroup(
            rulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rulesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rulesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(uploadLimitLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sizeLimitLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(setSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fileCheckBox)
                .addGap(18, 18, 18)
                .addComponent(folderCheckBox)
                .addContainerGap())
        );

        rulesPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {fileCheckBox, folderCheckBox});

        rulesPanelLayout.setVerticalGroup(
            rulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rulesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rulesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(folderCheckBox)
                    .addComponent(setSizeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sizeLimitLabel)
                    .addComponent(uploadLimitLabel)
                    .addComponent(setNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fileCheckBox)
                    .addComponent(rulesLabel))
                .addGap(7, 7, 7))
        );

        javax.swing.GroupLayout clientPanelLayout = new javax.swing.GroupLayout(clientPanel);
        clientPanel.setLayout(clientPanelLayout);
        clientPanelLayout.setHorizontalGroup(
            clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(clientPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rulesPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(connectPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(clientPanelLayout.createSequentialGroup()
                        .addComponent(choosePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        clientPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {choosePanel, connectPanel, rulesPanel});

        clientPanelLayout.setVerticalGroup(
            clientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rulesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connectPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(choosePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        clientPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {choosePanel, connectPanel});

        statusLabel.setText("Status:");

        uploadedLabel.setText("files/folders uploaded");

        numberUploadedLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        numberUploadedLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        numberUploadedLabel.setMaximumSize(new java.awt.Dimension(64, 14));
        numberUploadedLabel.setMinimumSize(new java.awt.Dimension(64, 14));
        numberUploadedLabel.setPreferredSize(new java.awt.Dimension(64, 14));

        fileMenu.setText("File");
        fileMenu.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        exitFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitFileMenuItem.setText("Exit");
        exitFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitFileMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText("Help");
        helpMenu.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        aboutHelpMenuItem.setText("About");
        aboutHelpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutHelpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutHelpMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusLabel)
                .addGap(14, 14, 14)
                .addComponent(setStatusLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(numberUploadedLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uploadedLabel)
                .addContainerGap())
            .addComponent(clientPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(clientPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusLabel)
                    .addComponent(numberUploadedLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uploadedLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(setStatusLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        ipClient=ipClientTextField.getText();
        portClient=portClientTextField.getText();
        studentId=studentIdTextField.getText();
        try{
            portClientInt=Integer.parseInt(portClient);//convert String to integer
            if(portClientInt<1025 || portClientInt>65536)//check if port is valid. throw exception for invalid one
                throw new Exception();           
        }//end try
        catch(Exception e)
        {
            portClient="";
            portClientTextField.setText("");
            //showing error message for wrong port
            JOptionPane.showMessageDialog(clientPanel, "Please enter valid number.\nRange: 1025-65536","Error!",JOptionPane.ERROR_MESSAGE);
            return;
        }//end catch
        
        try{
            studentIdInt=Integer.parseInt(studentId);
        }catch(Exception e){
            JOptionPane.showMessageDialog(clientPanel, "Student ID must be an integer!","Error!",JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            createConnection();
        } catch (UnknownHostException ex) {
            Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            getStreams();
        } catch (IOException ex) {
            Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            runClient();
        } catch (IOException ex) {
            Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    private void chooseFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileButtonActionPerformed
        try {
            // TODO add your handling code here:
            chooseFile();
        } catch (Exception ex) {
            Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_chooseFileButtonActionPerformed

    private void fileLocationTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileLocationTextFieldMouseClicked
        try {
            // TODO add your handling code here:
            chooseFile();
        } catch (Exception ex) {
            Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_fileLocationTextFieldMouseClicked

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        // TODO add your handling code here:
        if(selectedFile!=null){
            try {
                sendNames();
            } catch (IOException ex) {
                Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
            }
             catch (Exception ex) {
                    Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            //sendFile();
        }
        else{
            JOptionPane.showMessageDialog(clientPanel, "File not selected");
        }
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void yesOverwriteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesOverwriteButtonActionPerformed
        // TODO add your handling code here:
        //overwrite=true;
        overwrite=1;
        try {
            overwriteDialog.setVisible(false);
            //output.writeBoolean(overwrite);
            output.writeInt(overwrite);
            
            Thread sendFileThread=new Thread(){
                @Override
                public void run(){
                    try {
                        sendFile();
                    } catch (IOException ex) {
                        Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                            Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            sendFileThread.start();
        } catch (IOException ex) {
            Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_yesOverwriteButtonActionPerformed
    
    private void noOverwriteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noOverwriteButtonActionPerformed
        // TODO add your handling code here:
        //overwrite=false;
        overwrite=0;
        try {
            overwriteDialog.setVisible(false);
            //output.writeBoolean(overwrite);
            output.writeInt(overwrite);
            closeConnection();
            setupAgain();
        } catch (IOException ex) {
            Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_noOverwriteButtonActionPerformed

    private void aboutHelpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutHelpMenuItemActionPerformed
        // TODO add your handling code here:
        aboutDialog.setVisible(true);
    }//GEN-LAST:event_aboutHelpMenuItemActionPerformed

    private void exitFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitFileMenuItemActionPerformed
        // TODO add your handling code here:
        exitDialog.setVisible(true);
    }//GEN-LAST:event_exitFileMenuItemActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        exitDialog.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void cancelUploadDialogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelUploadDialogButtonActionPerformed
        // TODO add your handling code here:
        loop=false;
        cancelUploadDialogButton.setEnabled(false);
    }//GEN-LAST:event_cancelUploadDialogButtonActionPerformed

    private void yesAgainUploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yesAgainUploadButtonActionPerformed
        // TODO add your handling code here:
        againUploadDialog.setVisible(false);
        setupAgain();
        connectButtonActionPerformed(evt);
    }//GEN-LAST:event_yesAgainUploadButtonActionPerformed

    private void noAgainUploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noAgainUploadButtonActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_noAgainUploadButtonActionPerformed

    private void keepBothOverwriteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keepBothOverwriteButtonActionPerformed
        // TODO add your handling code here:
        overwrite=2;
        try {
            overwriteDialog.setVisible(false);
            //output.writeBoolean(overwrite);
            output.writeInt(overwrite);
            
            Thread sendFileThread=new Thread(){
                @Override
                public void run(){
                    try {
                        sendFile();
                    } catch (IOException ex) {
                        Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                            Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            };
            sendFileThread.start();
        } catch (IOException ex) {
            Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_keepBothOverwriteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    private void createConnection() throws UnknownHostException, IOException{
        System.out.println("createConnection");
        System.out.println(ipClient+"\n"+portClientInt);
        connection = new Socket(ipClient,portClientInt);//requesting server to accept connection
        choosePanel.setVisible(true);
        connectPanel.setVisible(false);
        setStatusLabel.setText("Connected to Server");
        System.out.println("Connected");
    }
    
    private void getStreams() throws IOException{
        output=new DataOutputStream(connection.getOutputStream());
        input=new DataInputStream(connection.getInputStream());
        os=connection.getOutputStream();
    }
    
    private void chooseFile() throws Exception{
        JFileChooser fileChooser=new JFileChooser();
        fileChooser.setMultiSelectionEnabled(true);
        if(fileUpload==true && folderUpload==true){
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        }
        else if(fileUpload==true){
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);            
        }
        else if(folderUpload==true){
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            
        }
        
        int returnValue=fileChooser.showOpenDialog(null);
        if(returnValue==JFileChooser.APPROVE_OPTION){
            selectedFiles=fileChooser.getSelectedFiles();
            //selectedFile=fileChooser.getSelectedFile();
            if(selectedFiles.length>1){
                multipleFileNumber=selectedFiles.length;
                multipleFiles=true;
                selectedFile=selectedFiles[fileCounter];
            }
            else if(selectedFiles.length==1){
                //System.out.println("selectedFilesssss");
                multipleFileNumber=0;
                selectedFile=selectedFiles[0];
                multipleFiles=false;
            }
            
            long selectedFileSize=folderSizeInByte(selectedFile);
            System.out.println("file size calculated: "+selectedFileSize);
            if(fileSize==0 || selectedFileSize<=fileSize){
                System.out.println("in if file size");
                fileLocation=selectedFile.getAbsolutePath();
                fileLocationTextField.setText(fileLocation);
                fileName=selectedFile.getName();
                System.out.println("file name: "+selectedFile.getName());
                System.out.println("location: "+fileLocation);
            }
            else{
                selectedFile=null;
                JOptionPane.showMessageDialog(clientPanel, "File size can be at most "+fileSizeMB+" MB!","Error!",JOptionPane.ERROR_MESSAGE);
            }
        }
        
        
    }
    
    public static long folderSizeInByte(File directory) {
        long _length = 0;
        if(directory.isFile()){
            return directory.length();
        }
        for (File file : directory.listFiles()) {
            if (file.isFile())
                _length += file.length();
            else
                _length += folderSizeInByte(file);
        }
        return _length;
    }
    
    private void setupAgain(){
        connectPanel.setVisible(true);
        choosePanel.setVisible(false);
        ipClientTextField.setEnabled(false);
        portClientTextField.setEnabled(false);
        studentIdTextField.setEnabled(false);
        connectButton.setEnabled(false);
        setStatusLabel.setText("Requesting Server...");
        
        
        chooseFileButton.setEnabled(true);
        uploadButton.setEnabled(true);
        fileLocationTextField.setEnabled(true);
        cancelUploadDialogButton.setEnabled(true);
        fileLocationTextField.setText("");
        fileUploadProgressBar.setValue(0);
    }
    
    private void sendNames() throws IOException, Exception{
        
        if(multipleFiles==true){
            if(fileCounter!=0){
                selectedFile=selectedFiles[fileCounter];
                fileLocation=selectedFile.getAbsolutePath();
                fileLocationTextField.setText(fileLocation);
                fileName=selectedFile.getName();
            }
            fileCounter++;
            if(fileCounter==multipleFileNumber){
                multipleFiles=false;
                fileCounter=0;
            }
        }
        
        
        deleteFile=false;
        isFile=true;
        fileName=selectedFile.getName();
        if(selectedFile.isDirectory()){
            isFile=false;
            System.out.println("is Directory check isFile: "+isFile);
            //new FolderZiper(fileLocation,selectedFile.getName()+".zip");
            //selectedFile=new File(selectedFile.getName()+".zip");
            fileName+=".zip";
            deleteFile=true;
            System.out.println("file name: "+selectedFile.getName());
            System.out.println("location: "+selectedFile.getAbsolutePath());
        }
        //fileLocation=selectedFile.getAbsolutePath();
        //fileLocationTextField.setText(fileLocation);
        //fileName=selectedFile.getName();
        //System.out.println("zip file name: "+selectedFile.getName());
        //System.out.println("zip location: "+fileLocation);
        
        //new edited
        
        System.out.println("new file name: "+selectedFile.getName());
        System.out.println("new location: "+fileLocation);
        
        System.out.println("new2 file name: "+fileName);
        
        length=fileName.length();
        output.writeInt(length);
        output.writeChars(fileName);
        /*
        length=0;
        length=folderName.length();
        output.writeInt(length);
        output.writeChars(folderName);
        * 
        */
        
        
        if(fileUpload==true && folderUpload==true){
            System.out.println("write isFile: "+isFile);
            output.writeBoolean(isFile);
        }
        
        
        matchPattern=input.readBoolean();
        if(matchPattern==false){
            JOptionPane.showMessageDialog(clientPanel, "File/folder name doesn't match");
            return;
        }
        
        boolean fileExists=input.readBoolean();
        if(fileExists==true){
            overwriteDialog.setVisible(true);
        }
        else{
            System.out.println("send file direct");
            Thread sendFileThread=new Thread(){
                @Override
                public void run(){
                    try {
                        sendFile();
                    } catch (IOException ex) {
                        Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (Exception ex) {
                            Logger.getLogger(FileUploadClient.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
            };
            sendFileThread.start();
            //sendFile();
        }
        
    }
    
    private void sendFile() throws IOException, Exception{
        progress=0;
        loopProg=0;
        l=0;
        progressDouble=0.0;
        
        uploadButton.setEnabled(false);
        chooseFileButton.setEnabled(false);
        fileLocationTextField.setEnabled(false);
        loop=true;
        uploadDialog.setVisible(true);
        
        if(selectedFile.isDirectory()){
            setStatusLabel.setText("Processing");
            statusUploadDialogLabel.setText("Processing folder. Please wait...");
            new FolderZiper(fileLocation,selectedFile.getName()+".zip");
            selectedFile=new File(selectedFile.getName()+".zip");
        }
        
        statusUploadDialogLabel.setText("Uploading. Please wait...");
        setStatusLabel.setText("Uploading");
        
        
        
        try{
            long fileLength = selectedFile.length();

            fiStream=new FileInputStream(selectedFile);

            fileUploadProgressBar.setMinimum(0);
            fileUploadProgressBar.setMaximum(100);
            System.out.println("fileLength: "+fileLength);
            
            fileByteArray =new byte[512];
            segmentSize=0;
            sendArrayCount=0;
            int sendArrayLength=0;
            boolean received=false;

            //String fileName=selectedFile.getName();
            byte[] fileNameByteArray=stringToBytes(selectedFile.getName());

            while(segmentSize!=-1 && loop==true){
                sendArrayCount=0;

                startingByte+=segmentSize;
                segmentSize=fiStream.read(fileByteArray);
                
                
                if(segmentSize==-1){
                    break;
                }
                else if(segmentSize<512){
                    byte[] temp=new byte[segmentSize];
                    System.arraycopy(fileByteArray, 0, temp, 0, segmentSize);
                    fileByteArray=new byte[segmentSize];
                    System.arraycopy(temp, 0, fileByteArray, 0, segmentSize);
                }
                output.writeUTF(selectedFile.getName());
                output.writeLong(startingByte);
                output.writeInt(segmentSize);
                os.write(fileByteArray);
                
                
                
                received=input.readBoolean();//acknowledgement
                
                
                /*
                
                

                System.out.println("segmentSize: "+segmentSize);
                //System.out.println("startingByte: "+startingByte);

                byte[] startingByteArray=longToBytes(startingByte);      
                byte[] segmentSizeByteArray=intToBytes(segmentSize);

                sendArrayLength=fileNameByteArray.length+delimByteArray.length+startingByteArray.length+delimByteArray.length+segmentSizeByteArray.length+delimByteArray.length+fileByteArray.length;
                //System.out.println("sendArrayLength: "+sendArrayLength);
                sendArray=new byte[sendArrayLength];

                output.writeInt(sendArrayLength);

                //filename
                System.arraycopy(fileNameByteArray, 0, sendArray, sendArrayCount, fileNameByteArray.length);
                sendArrayCount+=fileNameByteArray.length;
                //delim ::
                System.arraycopy(delimByteArray, 0, sendArray, sendArrayCount, delimByteArray.length);
                sendArrayCount+=delimByteArray.length;
                //starting byte
                System.arraycopy(startingByteArray, 0, sendArray, sendArrayCount, startingByteArray.length);
                sendArrayCount+=startingByteArray.length;
                //delim ::
                System.arraycopy(delimByteArray, 0, sendArray, sendArrayCount, delimByteArray.length);
                sendArrayCount+=delimByteArray.length;
                //chunk size
                System.arraycopy(segmentSizeByteArray, 0, sendArray, sendArrayCount, segmentSizeByteArray.length);
                sendArrayCount+=segmentSizeByteArray.length;
                //delim ::
                System.arraycopy(delimByteArray, 0, sendArray, sendArrayCount, delimByteArray.length);
                sendArrayCount+=delimByteArray.length;
                //file data
                System.arraycopy(fileByteArray, 0, sendArray, sendArrayCount, fileByteArray.length);
                sendArrayCount+=fileByteArray.length;

                //System.out.println("sendArrayCount: "+sendArrayCount);
                //System.out.println(sendArray);

                os.write(sendArray);   
                

                //String byteStr=bytesToString(sendArray);

                boolean received=input.readBoolean();
                //System.out.println("Received: "+received);
                * 
                * 
                */
                loopProg=segmentSize;
                l=(loopProg*100)/(fileLength*1.0);
                progressDouble+=l;
                //progress+=(int) Math.ceil(l);
                progress=(int) progressDouble;
                //System.out.println("Progress: "+progress);

                fileUploadProgressBar.setValue(progress);
                //fileUploadProgressBar.setString(progress+"%");
                fileUploadProgressBar.setStringPainted(true);
                
                /*
                if(segmentSize==-1){
                    break;
                }
                * 
                */

                //String[] segments=byteStr.split("::");
                //System.out.println(segments.length);
                
                if(segmentSize<512){
                    break;
                }
                
               
            }
            
            
            
            if(loop==true){
                fileUploadProgressBar.setValue(100);
                fileUploadProgressBar.setStringPainted(true);
                success=true;
                setStatusLabel.setText("File/Folder sent successfully");
            }
            else{
                success=false;
                setStatusLabel.setText("Error occurred!");
            }


            fiStream.close();
            System.out.println("before close");


            os.close();

            System.out.println("Finished");	

            
            
        }catch (IOException io) {
            System.out.println("Here it is");
            //io.printStackTrace();
            success=false;
        }
        
        
        
        System.out.println("before IF");
        if(selectedFile.exists() && deleteFile==true){
            System.out.println("Delete");
            
            boolean del=selectedFile.delete();//problreeem
            System.out.println("Delete successful: "+del);
        }
        if(success==true && loop==true){
            uploadDialog.setVisible(false);
            if(multipleFiles==false){
                JOptionPane.showMessageDialog(clientPanel, "File/Folder sent successfully");
            }
            fileNumberCount++;
            numberUploadedLabel.setText(" "+fileNumberCount+" ");
            if(fileNumber!=0 && fileNumberCount>=fileNumber){
                stopUploadFlag=true;
                stopUpload();
            }
        }
        else if(success==false && loop==true){
            uploadDialog.setVisible(false);
            JOptionPane.showMessageDialog(clientPanel, "Connection Lost!\nFile/Folder was not sent.");
        }
        
        else{
            uploadDialog.setVisible(false);
            JOptionPane.showMessageDialog(clientPanel, "File/Folder was not sent.");
        }
        if(stopUploadFlag==false){
            closeConnection();
        }
    }
    
    
    public static byte[] stringToBytes(String str) {
        char[] buffer = str.toCharArray();
        byte[] b = new byte[buffer.length << 1];
        CharBuffer cBuffer = ByteBuffer.wrap(b).asCharBuffer();
        for(int i = 0; i < buffer.length; i++)
        cBuffer.put(buffer[i]);
        return b;
    }
    
    public byte[] longToBytes(long x) {
        ByteBuffer buffer = ByteBuffer.allocate(Long.SIZE/8);
        buffer.putLong(x);
        return buffer.array();
    }

    public static byte[] intToBytes(int a)
    {
        return new byte[] {
            (byte) ((a >> 24) & 0xFF),
            (byte) ((a >> 16) & 0xFF),   
            (byte) ((a >> 8) & 0xFF),   
            (byte) (a & 0xFF)
        };
    }
    
    
    
    private void stopUpload() throws IOException{
        output.close();
        input.close();
        connection.close();
        setStatusLabel.setText("Maximum number of file/folders uploaded.");
        JOptionPane.showMessageDialog(clientPanel, "You can't upload anymore!");
    }
    
    private void closeConnection() throws IOException{
        output.close();
        input.close();
        connection.close();
        
        if(multipleFiles==false){
            againUploadDialog.setVisible(true);
        }
        else{
            yesAgainUploadButtonActionPerformed(null);
        }
    }
    
    private void closeAndSetup() throws IOException{
        output.close();
        input.close();
        connection.close();
        
        choosePanel.setVisible(false);
        connectPanel.setVisible(true);
        if(verified==WRONG_ID){//student id is wrong
            JOptionPane.showMessageDialog(clientPanel, "Wrong Student ID! Please try again.");
        }
        else if(verified==DUPLICATE_IP){//same IP different rolls
            JOptionPane.showMessageDialog(clientPanel, "You can't access from this IP.");
        }
        else if(verified==DUPLICATE_ID){//same roll different IP
            JOptionPane.showMessageDialog(clientPanel, "You have accessed from different IP before!");
        }
        
    }
    /*
    private void sendBytes(byte[] dataBytes) throws IOException {
        synchronized (connection) {
            //System.out.println("IN send bytes");
            os.write(dataBytes);
            os.flush();
        }
    }
    
    * 
    */
    
    private void runClient() throws IOException{
        getRules();
        if(multipleFiles==true){
            uploadButtonActionPerformed(null);
        }
    }
    
    private void getRules() throws IOException{
       
        output.writeInt(studentIdInt);//send student ID to server
        
        
        verified=input.readInt();
        System.out.println("verified: "+verified);
        
        if(verified==WRONG_ID){//student id is wrong
            closeAndSetup();
        }
        else if(verified==DUPLICATE_IP){//same IP different rolls
            closeAndSetup();
        }
        else if(verified==DUPLICATE_ID){//same roll different IP
            closeAndSetup();
        }
        
        fileUpload=input.readBoolean();
        folderUpload=input.readBoolean();
        fileSizeMB=input.readLong();
        fileNumber=input.readInt();
        fileNumberCount=input.readInt();
        System.out.println("fileUpload: "+fileUpload);
        System.out.println("folderUpload: "+folderUpload);
        System.out.println("fileSize: "+fileSizeMB);
        System.out.println("fileNumber: "+fileNumber);
        System.out.println("fileNumberCount: "+fileNumberCount);
        
        fileSize=fileSizeMB*1024*1024;
        System.out.println("Final fileSize: "+fileSize);
        
        
        setNumberLabel.setText(fileNumber+"");
        setSizeLabel.setText(fileSizeMB+" MB");
        if(fileUpload==true){
            fileCheckBox.setSelected(true);
        }
        if(folderUpload==true){
            folderCheckBox.setSelected(true);
        }
        
        numberUploadedLabel.setText(" "+fileNumberCount+" ");
        
        if(fileNumber!=0 && fileNumberCount>=fileNumber){
            uploadButton.setEnabled(false);
            chooseFileButton.setEnabled(false);
            fileLocationTextField.setEnabled(false);
            stopUploadFlag=true;
            stopUpload();
        }
        
    }
    
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileUploadClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileUploadClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileUploadClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileUploadClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                FileUploadClient fileUploadClient=new FileUploadClient();
                fileUploadClient.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                fileUploadClient.setTitle("File Uploader - Client");
                fileUploadClient.setLocationByPlatform(true);
                fileUploadClient.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog aboutDialog;
    private javax.swing.JMenuItem aboutHelpMenuItem;
    private javax.swing.JDialog againUploadDialog;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton cancelUploadDialogButton;
    private javax.swing.JButton chooseFileButton;
    private javax.swing.JPanel choosePanel;
    private javax.swing.JPanel clientPanel;
    private javax.swing.JButton connectButton;
    private javax.swing.JPanel connectPanel;
    private javax.swing.JButton exitButton;
    private javax.swing.JDialog exitDialog;
    private javax.swing.JMenuItem exitFileMenuItem;
    private javax.swing.JLabel exitLabel;
    private javax.swing.JCheckBox fileCheckBox;
    private javax.swing.JTextField fileLocationTextField;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JProgressBar fileUploadProgressBar;
    private javax.swing.JCheckBox folderCheckBox;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel ipClientLabel;
    private javax.swing.JTextField ipClientTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JButton keepBothOverwriteButton;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton noAgainUploadButton;
    private javax.swing.JButton noOverwriteButton;
    private javax.swing.JLabel numberUploadedLabel;
    private javax.swing.JDialog overwriteDialog;
    private javax.swing.JLabel overwriteLabel;
    private javax.swing.JLabel portClientLabel;
    private javax.swing.JTextField portClientTextField;
    private javax.swing.JLabel rulesLabel;
    private javax.swing.JPanel rulesPanel;
    private javax.swing.JLabel setNumberLabel;
    private javax.swing.JLabel setSizeLabel;
    private javax.swing.JLabel setStatusLabel;
    private javax.swing.JLabel sizeLimitLabel;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel statusUploadDialogLabel;
    private javax.swing.JLabel studentIdLabel;
    private javax.swing.JTextField studentIdTextField;
    private javax.swing.JButton uploadButton;
    private javax.swing.JDialog uploadDialog;
    private javax.swing.JLabel uploadLimitLabel;
    private javax.swing.JLabel uploadedLabel;
    private javax.swing.JButton yesAgainUploadButton;
    private javax.swing.JButton yesOverwriteButton;
    // End of variables declaration//GEN-END:variables
}

class FolderZiper {
  
    public FolderZiper(String srcFolder, String destZipFile) throws Exception {
        ZipOutputStream zip = null;
        FileOutputStream fileWriter = null;

        fileWriter = new FileOutputStream(destZipFile);
        zip = new ZipOutputStream(fileWriter);

        
        addFolderToZip("", srcFolder, zip);
        zip.flush();
        zip.close();
    }

    private void addFileToZip(String path, String srcFile, ZipOutputStream zip)
        throws Exception {

        File folder = new File(srcFile);
        if (folder.isDirectory()) {
            addFolderToZip(path, srcFile, zip);
        } else {
            byte[] buf = new byte[1024];
            int len;
            FileInputStream in = new FileInputStream(srcFile);
            zip.putNextEntry(new ZipEntry(path + "/" + folder.getName()));
            while ((len = in.read(buf)) > 0) {
                zip.write(buf, 0, len);
            }
        }
    }

    private void addFolderToZip(String path, String srcFolder, ZipOutputStream zip)
        throws Exception {
        File folder = new File(srcFolder);
        
        for (String fileName : folder.list()) {
            if (path.equals("")) {
                    addFileToZip(folder.getName(), srcFolder + "/" + fileName, zip);
            } else {
                    addFileToZip(path + "/" + folder.getName(), srcFolder + "/" + fileName, zip);
            }
        }
    }
}